(function(){
  var startedWithMinutes = null;

  // This number *never* changes
  var developerSecondsSavedBeforeAnalyticIngester = 26304323354;

  // These numbers are taken from our SQL query
  var developerSecondsSavedAfterAnalyticIngester = 4292012226;
  var developerSecondsSavedPerSecond = 560;
  var timeUpdated = 1499885116;

  var domTarget = document.querySelector('.hero__hours-counter__counter');

  function reloadThis() {
    // get current time
    // get difference in seconds from timeUpdated
    // multiply difference in seconds by developerSecondsSavedPerSecond
    // add to sum of developerSecondsSavedBefore and After

    var currentEpoch = ((new Date()).getTime()) / 1000;

    var developerSecondsSavedSinceUpdate = (currentEpoch - timeUpdated) * developerSecondsSavedPerSecond;
    var seconds = developerSecondsSavedSinceUpdate + developerSecondsSavedBeforeAnalyticIngester + developerSecondsSavedAfterAnalyticIngester;

    var minutes = seconds / 60; // to minutes
    if (startedWithMinutes === null) {
      startedWithMinutes = minutes;
    }
    var hours = minutes / 60; // to hours
    var hoursAsArray = parseInt(hours).toString().split('');
    var outputHtml = '';
    var hoursOutput = [];
    hoursAsArray.reverse();

    for (var i = 0; i < hoursAsArray.length; i++) {
      if ((i !== 0) && (i % 3 === 0)) {
        hoursOutput[i] = '<span>'+ hoursAsArray[i] +'</span><span class="comma">,</span>';
      }else{
        hoursOutput[i] = '<span>'+ hoursAsArray[i] +'</span>';
      }
    }

    hoursOutput.reverse();
    for (var a = 0; a < hoursOutput.length; a++) {
      outputHtml += hoursOutput[a] ;
    }
    domTarget.innerHTML = outputHtml;
  }
  reloadThis();
  setInterval(reloadThis, 10000);
})();
/**
 * @fileoverview
 * Handles the intersection observation for the "how it works" section
 * and applies necessary animation triggers.
 */
(function(){  
  var target = document.querySelector('.typeahead');

  var io = new IntersectionObserver(function(e) {
    var inView = e.find(function(i) {
      return i.isIntersecting;
    });
    if (inView) {
      connectAnimations();
    }
  });

  io.observe(target);

  function connectAnimations() {
    var BETA = 'beta';
    var APPSTORE = 'appstore';

    var currentActive = BETA;

    var stepsContainer = document.querySelector('.animation__steps');

    var betaCode = document.getElementById('beta');
    var betaSteps = document.getElementById('steps-beta');

    var appStoreCode = document.getElementById('appstore');
    var appstoreSteps = document.getElementById('steps-appstore');

    // Typeahead element
    var whichType = document.querySelector('.typeahead__target');

    setInterval(function() {
      if (currentActive == APPSTORE) {
        appStoreCode.classList.remove('active');
        appstoreSteps.classList.remove('active');

        stepsContainer.classList.remove('expanded')
        betaCode.classList.add('active');
        betaSteps.classList.add('active');
        whichType.textContent = BETA;
        currentActive = BETA;
      } else if (currentActive == BETA) {
        appStoreCode.classList.add('active');
        appstoreSteps.classList.add('active');

        stepsContainer.classList.add('expanded');
        betaCode.classList.remove('active');
        betaSteps.classList.remove('active');
        whichType.textContent = APPSTORE;
        currentActive = APPSTORE;
      }
    }, 4000);
  }
})();
(function(){
  // Init YouTube player
  var tag = document.createElement('script');

  tag.src = 'https://www.youtube.com/iframe_api';
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Add mobile class
  if (/ip(ad|hone|od)|android/i.test(window.navigator.userAgent)) {
    document.body.classList.add('mobile');
  }
})();

(function(){
  var BETA_STR_ = 'beta'.split();
  var DEPLOY_STR_ = 'appstore'.split();

  var target = document.querySelector('.typeahead__target');
  
})();
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Mobile logic scaffolded to prevent UX overriding.
/**
 * @fileoverview
 * This connects modal functionality and YouTube embedding for the
 * "how it works" section.  On non-mobile devices, the video will open in
 * a modal window.  For mobile devices, it will act as every other YT embed
 * as to not interfere with the normal UX.
 */
var player;
// Kicks off the process.
function onYouTubeIframeAPIReady() {
  player = new YT.Player('yt-player', {
    width: '100%',
    height: '100%',
    videoId: 'wOtANfkh2bI',
    events: {
      onReady: $fastlaneYT.onPlayerReady,
      onStateChange: $fastlaneYT.onPlayerStateChange
    }
  });
}
window.$fastlaneYT = (function() {
=======
var player;
<<<<<<< HEAD
var $fastlaneYT = (function() {
>>>>>>> Prototype for video modal.
=======
// Kicks off the process.
function onYouTubeIframeAPIReady() {
  player = new YT.Player('yt-player', {
    width: '100%',
    height: '100%',
    videoId: 'seoY2-hm7lQ',
    events: {
      onReady: $fastlaneYT.onPlayerReady,
      onStateChange: $fastlaneYT.onPlayerStateChange
    }
  });
}
window.$fastlaneYT = (function() {
>>>>>>> Improved thumnail quality, logic split to mobile/modal.

  // Constants
  var MAX_WIDTH_PERC_ = 0.25;
  var EXPAND_DURATION_ = 0.45; // seconds
<<<<<<< HEAD
<<<<<<< HEAD
  // @todo(sgeer): Better mobile detection
  var ratio = 16 / 9;


  return {
    onPlayerReady: initModal
  };

  /**
   * Sets up event listeners, etc for modal interaction.
   */
  function initModal(player) {
    var isMobile = document.body.classList.contains('mobile');
    return isMobile ? setupMobilePlayer(player.target) : setupModalPlayer(player.target);
  }

  /**
   * Don't interrupt the normal mobile YouTube player flow if the user is
   * on a device.
   */
  function setupMobilePlayer(player) {
    console.info('Setting up mobile player.')
  }

  /**
   * If we have an idea the user isn't on a mobile device, set up the
   * modal functionality.
   */
  function setupModalPlayer(player) {
    player.setPlaybackQuality('hd720');

    var modalContainer = document.querySelector('.video-modal');
    var vMedia = document.querySelector('.video-modal__media');
    var ytDom = document.getElementById('yt-player');
    var closeButton = document.querySelector('.video-modal__close span');
    var backdrop = createBackdrop_();

    var modalWidth = modalContainer.offsetWidth;
    var modalHeight = modalContainer.offsetHeight;

    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var maxWidth = winWidth - winWidth * MAX_WIDTH_PERC_;
    var maxHeight = maxWidth / ratio;

    modalContainer.addEventListener('click', openModal);
    document.addEventListener('click', checkModalClose);
    window.addEventListener('keyup', closeModal);
    closeButton.addEventListener('click', closeModal.bind(this, null, true));

    /**
     * Open the video modal.
     * @param {MouseEvent} e
     */
    function openModal(e) {
=======
=======
  // @todo(sgeer): Better mobile detection
<<<<<<< HEAD
  var PLATFORM_MOBILE_ = /ipad|iphone|android/.test(window.navigator.userAgent);
>>>>>>> Improved thumnail quality, logic split to mobile/modal.
=======
  var PLATFORM_MOBILE_ = /ipad|iphone|android/i.test(window.navigator.userAgent);
>>>>>>> Mobile logic scaffolded to prevent UX overriding.
  var ratio = 16 / 9;

  if(PLATFORM_MOBILE_) {
    document.body.classList.add('mobile');
  }

  return {
    onPlayerReady: initModal
  };

  /**
   * Sets up event listeners, etc for modal interaction.
   */
  function initModal(player) {
    return PLATFORM_MOBILE_ ? setupMobilePlayer(player.target) : setupModalPlayer(player.target);
  }

  /**
   * Don't interrupt the normal mobile YouTube player flow if the user is
   * on a device.
   */
  function setupMobilePlayer(player) {
    console.info('Setting up mobile player.')
  }

  /**
   * If we have an idea the user isn't on a mobile device, set up the
   * modal functionality.
   */
  function setupModalPlayer(player) {
    player.setPlaybackQuality('hd720');

    var modalContainer = document.querySelector('.video-modal');
    var vMedia = document.querySelector('.video-modal__media');
    var ytDom = document.getElementById('yt-player');
    var backdrop = createBackdrop_();

    var modalWidth = modalContainer.offsetWidth;
    var modalHeight = modalContainer.offsetHeight;

    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var maxWidth = winWidth - winWidth * MAX_WIDTH_PERC_;
    var maxHeight = maxWidth / ratio;

    modalContainer.addEventListener('click', openModal);
    document.addEventListener('click', checkModalClose);
    window.addEventListener('keyup', closeModal);

    /**
<<<<<<< HEAD
       * Open the video modal.
       * @param {MouseEvent} e
       */
    function onVideoClick(e) {
>>>>>>> Prototype for video modal.
=======
     * Open the video modal.
     * @param {MouseEvent} e
     */
    function openModal(e) {
>>>>>>> Improved thumnail quality, logic split to mobile/modal.
      var pos = modalContainer.getBoundingClientRect();
      var x = pos.left;
      var y = pos.top;

      vMedia.style.display = 'block';
      vMedia.style.left = x + 'px';
      vMedia.style.top = y + 'px';
<<<<<<< HEAD
<<<<<<< HEAD
      backdrop.style.display = 'block';
=======
>>>>>>> Prototype for video modal.
=======
      backdrop.style.display = 'block';
>>>>>>> Added modal backdrop and animation.

      var END_WIDTH_ = maxWidth + 'px';
      var END_HEIGHT_ = maxWidth / ratio + 'px';

      TweenMax.to(vMedia, EXPAND_DURATION_, {
        width: END_WIDTH_,
        height: END_HEIGHT_,
        opacity: 1,
        left: (winWidth - maxWidth) / 2 + 'px',
        top: (winHeight - maxHeight) / 2 + 'px',
        ease: Power2.easeInOut,
        onComplete: onModalOpen
      });
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Added modal backdrop and animation.

      TweenMax.to(backdrop, EXPAND_DURATION_, {
        opacity: 1
      })
<<<<<<< HEAD
    }

    /**
     * Close the modal and return to natural position.
     * Callback from ESC keypress
     * @param {KeyboardEvent} e
     */
    function closeModal(e, force) {
      if (force === true || e.keyCode == 27) {
        player.pauseVideo();

        var pos = modalContainer.getBoundingClientRect();
        var x = pos.left;
        var y = pos.top;

=======
=======
>>>>>>> Added modal backdrop and animation.
    }

    /**
       * Close the modal and return to natural position.
       * Callback from ESC keypress
       * @param {KeyboardEvent} e
       */
    function closeModal(e) {
      if (e.keyCode == 27) {
<<<<<<< HEAD
>>>>>>> Prototype for video modal.
=======
        player.pauseVideo();

        var pos = modalContainer.getBoundingClientRect();
        var x = pos.left;
        var y = pos.top;

>>>>>>> Added modal backdrop and animation.
        TweenMax.to(vMedia, EXPAND_DURATION_, {
          width: modalWidth + 'px',
          height: modalHeight + 'px',
          left: x + 'px',
          top: y + 'px',
          opacity: 0,
          ease: Power2.easeInOut,
          onComplete: onModalClose
        });
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Added modal backdrop and animation.

        TweenMax.to(backdrop, EXPAND_DURATION_, {
          opacity: 0,
          onComplete: function() {
            backdrop.style.display = 'none';
          }
        })
<<<<<<< HEAD
=======
>>>>>>> Prototype for video modal.
      }
    }

    /**
<<<<<<< HEAD
     * Callback for clicking elsewhere on the document to close the modal.
     * @todo(sgeer)
     */
    function checkModalClose(e) {
      if (e.target.classList.contains('video-modal__backdrop')) {
        closeModal(null, true);
=======
>>>>>>> Added modal backdrop and animation.
      }
    }

    /**
<<<<<<< HEAD
     * onComplete callback for opening the modal.
     */
    function onModalOpen() {
      ytDom.style.display = 'block';
      vMedia.style.display = 'block'
      player.playVideo();
=======
       * Get the necessary dimensions for calculating the modal size/dim.
       */
    function setDimensions() {
      modalWidth = modalContainer.offsetWidth;
      modalHeight = modalContainer.offsetHeight;

      winWidth = window.innerWidth;
      winHeight = window.innerHeight;
      maxWidth = winWidth - winWidth * MAX_WIDTH_PERC_;
      maxHeight = maxWidth / ratio;
    }

    /**
       * Callback for clicking elsewhere on the document to close the modal.
       * @todo(sgeer)
       */
=======
     * Callback for clicking elsewhere on the document to close the modal.
     * @todo(sgeer)
     */
>>>>>>> Improved thumnail quality, logic split to mobile/modal.
    function checkModalClose() {
      return false;
    }

    /**
     *
     */
    function onModalOpen() {
      ytDom.style.display = 'block';
      vMedia.style.display = 'block'
<<<<<<< HEAD
>>>>>>> Prototype for video modal.
=======
      player.playVideo();
>>>>>>> Improved thumnail quality, logic split to mobile/modal.
      return TweenMax.to(ytDom, EXPAND_DURATION_, {
        opacity: 1
      });
    }

    function onModalClose() {
      return TweenMax.to(ytDom, EXPAND_DURATION_, {
        opacity: 0,
        onComplete: function() {
          ytDom.style.display = 'none';
          vMedia.style.display = 'none'
        }
      });
    }
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Added modal backdrop and animation.

    function createBackdrop_() {
      var div = document.createElement('div');
      div.classList.add('video-modal__backdrop');
      document.body.appendChild(div);
      return div;
    }
  }
})();
=======
  }
})();
<<<<<<< HEAD
function onYouTubeIframeAPIReady() {
  player = new YT.Player('yt-player', {
    width: '100%',
    height: '100%',
    videoId: 'seoY2-hm7lQ',
    events: {
      onReady: $fastlaneYT.onPlayerReady,
      onStateChange: $fastlaneYT.onPlayerStateChange
    }
  });
}
>>>>>>> Prototype for video modal.
=======
>>>>>>> Improved thumnail quality, logic split to mobile/modal.
