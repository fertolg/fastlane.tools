// Slick carousel module
//
var carousel = function() {
  var $slickCarousels = $('.slick');
  $.each($slickCarousels, function(index, element) {
    var arrows = element.hasAttribute("data-arrows");
    var dots = element.hasAttribute("data-dots");
    var carouselName = element.getAttribute("data-carousel-name");

    $(element).slick({
      arrows: arrows,
      dots: dots,
      draggable: true,
      accessibility: true,
      zIndex: true,
      responsive: [{
        breakpoint: 560,
        settings: {
          dots: false,
          arrows: false
        }
      },
      {
        breakpoint: 1025,
        settings: {
          arrows: false
        }
      }]
    });

    // Accessibility
    // Add ability to move through carousel
    //
    $(element).on('keydown', function(e) {
      var keyCode = e.which;
      if ((keyCode === 13) || (keyCode === 32)) {
        e.preventDefault();
        $(this).slick('slickNext');
      }
    });
  });
}();

(function(){
  var startedWithMinutes = null;

  // This number *never* changes
  var developerSecondsSavedBeforeAnalyticIngester = 26304323354;

  // These numbers are taken from our SQL query
  var developerSecondsSavedAfterAnalyticIngester = 4292012226;
  var developerSecondsSavedPerSecond = 560;
  var timeUpdated = 1499885116;

  var domTarget = document.querySelector('.hero__hours-counter__counter');

  function reloadThis() {
    // get current time
    // get difference in seconds from timeUpdated
    // multiply difference in seconds by developerSecondsSavedPerSecond
    // add to sum of developerSecondsSavedBefore and After

    var currentEpoch = ((new Date()).getTime()) / 1000;

    var developerSecondsSavedSinceUpdate = (currentEpoch - timeUpdated) * developerSecondsSavedPerSecond;
    var seconds = developerSecondsSavedSinceUpdate + developerSecondsSavedBeforeAnalyticIngester + developerSecondsSavedAfterAnalyticIngester;

    var minutes = seconds / 60; // to minutes
    if (startedWithMinutes === null) {
      startedWithMinutes = minutes;
    }
    var hours = minutes / 60; // to hours
    var hoursAsArray = parseInt(hours).toString().split('');
    var outputHtml = '';
    var hoursOutput = [];
    hoursAsArray.reverse();

    for (var i = 0; i < hoursAsArray.length; i++) {
      if ((i !== 0) && (i % 3 === 0)) {
        hoursOutput[i] = '<span>'+ hoursAsArray[i] +'</span><span class="comma">,</span>';
      }else{
        hoursOutput[i] = '<span>'+ hoursAsArray[i] +'</span>';
      }
    }

    hoursOutput.reverse();
    for (var a = 0; a < hoursOutput.length; a++) {
      outputHtml += hoursOutput[a] ;
    }
    domTarget.innerHTML = outputHtml;
  }
  reloadThis();
  setInterval(reloadThis, 10000);
})();
/**
 * @fileoverview
 * Handles the intersection observation for the "how it works" section
 * and applies necessary animation triggers.
 */
(function(){  
  var target = document.querySelector('.typeahead');

  var io = new IntersectionObserver(function(e) {
    var inView = e.find(function(i) {
      return i.isIntersecting;
    });
    if (inView) {
      connectAnimations();
    }
  });

  io.observe(target);

  function connectAnimations() {
    var BETA = 'beta';
    var APPSTORE = 'appstore';

    var currentActive = BETA;

    var stepsContainer = document.querySelector('.animation__steps');

    var betaCode = document.getElementById('beta');
    var betaSteps = document.getElementById('steps-beta');

    var appStoreCode = document.getElementById('appstore');
    var appstoreSteps = document.getElementById('steps-appstore');

    // Typeahead element
    var whichType = document.querySelector('.typeahead__target');

    setInterval(function() {
      if (currentActive == APPSTORE) {
        appStoreCode.classList.remove('active');
        appstoreSteps.classList.remove('active');

        stepsContainer.classList.remove('expanded')
        betaCode.classList.add('active');
        betaSteps.classList.add('active');
        whichType.textContent = BETA;
        currentActive = BETA;
      } else if (currentActive == BETA) {
        appStoreCode.classList.add('active');
        appstoreSteps.classList.add('active');

        stepsContainer.classList.add('expanded');
        betaCode.classList.remove('active');
        betaSteps.classList.remove('active');
        whichType.textContent = APPSTORE;
        currentActive = APPSTORE;
      }
    }, 4000);
  }
})();
'use strict';

var hero = function() {

  /*
  * Browser fixes
  */
  // IE does not supports the transform attribute, but not the CSS style
  // This is a workaround for it
  var transformedElements = $('.has-transform');
  $.each(transformedElements, function(index, el){
    var transform = getComputedStyle(el).getPropertyValue('transform');
    $(el).attr('transform', transform);
  })

  /*
  * Helper methods
  */
  Math.randMinMax = function(t, n, a){
    var r = t + Math.random() * (n - t);
    return a && ( r = Math.round(r) ), r;
  }

  /*
  * Placing elements based on viewport width
  */
  var bottomRightX;
  var bottomRightMeshWidth = 300;
  var placeElements = function(){
    var $heroBg = $('.hero__background');
    var heroWidth = $heroBg.width();
    var heroHeight = $heroBg.height();

    var $triangleBottomRight = $('.mesh-lines-bottom-right');
    bottomRightX = heroWidth - bottomRightMeshWidth;

    TweenMax.set($triangleBottomRight, {
      x: bottomRightX
    });
  }

  /*
  * Animates individual line opacities on large meshes
  */
  var animateLineOpacity = function(){
    var triangleLines = $('.mesh-lines').toArray();
    triangleLines.sort(function(){ return 0.5-Math.random() });
    var opacityTl = new TimelineMax();

    opacityTl.staggerTo(triangleLines, 1, {alpha:0.3, repeatDelay:4, repeat:-1, yoyo:true}, 0.1);
    opacityTl.play();
  }

  /*
  * Animates individual triangles attaching / reattaching to meshes (loop)
  */
  var animateTriangles = function(){
    var triangles = document.querySelectorAll('.triangle');
    TweenMax.set(triangles, {
      scale: 0.75,
      alpha: 0
    });

    // Triangle Left Top animation (Attach + Drop down)
    var triangle1Detach = document.querySelector('.triangle-1--detach');
    var triangle1Attach = document.querySelector('.triangle-1--attach');

    var tl1 = new TimelineMax({repeat: -1, repeatDelay:10});
    tl1.timeScale(6);
    tl1.to(triangle1Attach, 5, {
      alpha: 1
    });
    tl1.to(triangle1Attach, 25, {
      rotation:'+=270',
      svgOrigin:'526 -30',
      ease:Power2.easeInOut,
      x: 355,
      y: 140
    });
    tl1.to(triangle1Attach, 15, {
      alpha: 0
    });
    tl1.to(triangle1Detach, 5, {
      alpha: 1
    }, '-=15');
    tl1.to(triangle1Detach, 25, {
      rotation:'+=270',
      svgOrigin:'375 200',
      ease:Power2.easeInOut,
      x: 550,
      y: 650
    });
    tl1.to(triangle1Detach, 5, {
      alpha: 0
    });

    // Triangle Right Half (Little machine drop / conveyor belt)
    var triangle2FloatIn = document.querySelector('.triangle-2--float-in');
    var triangle2Attach = document.querySelector('.triangle-2--attach');
    var meshTopRight = document.querySelector('.mesh-lines-top-right');
    var triangle2Curve1 =[{x: bottomRightX - 200, y:600}, {x:bottomRightX - 350, y:320}, {x:bottomRightX - 250, y: 278}];
    var triangle2Curve2 =[{x:bottomRightX - 250, y: 278}, {x:bottomRightX - 250, y:420}, {x:bottomRightX - 233, y: 435}];

    TweenMax.set(triangle2FloatIn, {
      x: bottomRightX,
      y: 600
    });
    TweenMax.set(triangle2Attach, {
      x: bottomRightX - 200,
      y: 600
    });
    TweenMax.set(meshTopRight, {
      x: bottomRightX + 60,
      y: 100
    });
    var tl2 = new TimelineMax({repeat: -1, repeatDelay:25});
    tl2.timeScale(6);
    tl2.to([triangle2Attach, triangle2FloatIn], 25, {
      alpha: 1
    });
    tl2.to(triangle2Attach, 25, {
      rotation:'+=120',
      svgOrigin: (bottomRightX) + ' 700',
      ease:Power2.easeInOut,
      bezier:{
        type: "quadratic",
        curviness: 5,
        values: triangle2Curve1
	     }
    });
    tl2.to([triangle2Attach, meshTopRight], 10, {
      rotation:'-=60',
      svgOrigin: (bottomRightX + 137) + ' 120'
    })
    tl2.to(triangle2Attach, 15, {
      bezier:{
        type: "quadratic",
        curviness: 5,
        values: triangle2Curve2
	     }
    });
    tl2.to(triangle2Attach, 15, {
      rotate: '+=13',
      x: bottomRightX + 50,
      y: 260
    });
    tl2.to(meshTopRight, 10, {
      rotation:'+=60',
      svgOrigin: (bottomRightX + 137) + ' 120'
    })
    tl2.to(triangle2FloatIn, 25, {
      ease: Power2.easeInOut,
      x: bottomRightX + 30,
      y: 396
    });
    tl2.to(triangle2FloatIn, 5, {
      alpha: 0
    });

    // Triangle Left Bottom animation
    var triangle3Attach = document.querySelector('.triangle-3--attach');
    TweenMax.set(triangle3Attach, {
      rotate: '-250',
      x: -40,
      y: 420
    });
    var tl3 = new TimelineMax({repeat: -1, repeatDelay:25});
    tl3.timeScale(6);
    tl3.to(triangle3Attach, 5, {
      alpha: 1
    });
    tl3.to(triangle3Attach, 5, {
      ease:Linear.easeNone,
      x: 58,
      y: 362
    });
    tl3.to(triangle3Attach, 5, {
      x: 120,
      y: 401
    });
    tl3.to(triangle3Attach, 5, {
      x: 183,
      y: 364
    });
    tl3.to(triangle3Attach, 3, {
      x: 183,
      y: 280
    });
    tl3.to(triangle3Attach, 15, {
      rotation:'-=270',
      transformOrigin:'0 0',
      ease:Power2.easeIn,
      x: 650,
      y: 700
    });
  }

  /*
  * Animates floating particles (uses particles.js)
  */
  var createParticles = function() {
    particlesJS("particle__wrapper", {
      "particles": {
        "number": {
          "value": 9,
          "density": {
            "enable": true,
            "value_area": 800
          }
        },
        "color": {
          "value": ['#00F6FB', '#0081FF', '#FF2200', '#00F200']
        },
        "shape": {
          "type": "circle"
        },
        "opacity": {
          "value": 8,
          "random": true,
          "anim": {
            "enable": true,
            "speed": 0.2,
            "opacity_min": 0,
            "sync": false
          }
        },
        "size": {
          "value": 5,
          "random": false,
          "anim": {
            "enable": false,
            "speed": 5,
            "size_min": 0.1,
            "sync": false
          }
        },
        "line_linked": {
          "enable": false,
          "distance": 150,
          "color": "#3E3EF8",
          "opacity": 0,
          "width": 0
        },
        "move": {
          "enable": true,
          "speed": 1,
          "direction": "none",
          "random": true,
          "straight": false,
          "out_mode": "out",
          "bounce": false,
          "attract": {
            "enable": false,
            "rotateX": 600,
            "rotateY": 1200
          }
        }
      },
      "interactivity": {
        "detect_on": "window",
        "events": {
          "onhover": {
            "enable": true,
            "mode": "grab"
          },
          "onclick": {
            "enable": true,
            "mode": "repulse"
          },
          "resize": true
        },
        "modes": {
          "grab": {
            "distance": 140,
            "line_linked": {
              "opacity": 1
            }
          },
          "bubble": {
            "distance": 400,
            "size": 10,
            "duration": 2,
            "opacity": 8,
            "speed": 3
          },
          "repulse": {
            "distance": 300,
            "duration": 10
          },
          "push": {
            "particles_nb": 4
          },
          "remove": {
            "particles_nb": 2,
            "opacity": 0
          }
        }
      },
      "retina_detect": true
    });
  }

  /*
  * Initialize
  */
  var init = function() {
    placeElements();
    animateLineOpacity();
    animateTriangles();
    createParticles();
  }();

}();

(function(){
  // Init YouTube player
  var tag = document.createElement('script');

  tag.src = 'https://www.youtube.com/iframe_api';
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Add mobile class
  if (/ip(ad|hone|od)|android/i.test(window.navigator.userAgent)) {
    document.body.classList.add('mobile');
  }
})();

(function(){
  var BETA_STR_ = 'beta'.split();
  var DEPLOY_STR_ = 'appstore'.split();

  var target = document.querySelector('.typeahead__target');
  
})();
/**
 * @fileoverview
 * This connects modal functionality and YouTube embedding for the
 * "how it works" section.  On non-mobile devices, the video will open in
 * a modal window.  For mobile devices, it will act as every other YT embed
 * as to not interfere with the normal UX.
 */
var player;
// Kicks off the process.
function onYouTubeIframeAPIReady() {
  player = new YT.Player('yt-player', {
    width: '100%',
    height: '100%',
    videoId: 'wOtANfkh2bI',
    events: {
      onReady: $fastlaneYT.onPlayerReady,
      onStateChange: $fastlaneYT.onPlayerStateChange
    }
  });
}
window.$fastlaneYT = (function() {

  // Constants
  var MAX_WIDTH_PERC_ = 0.25;
  var EXPAND_DURATION_ = 0.45; // seconds
  // @todo(sgeer): Better mobile detection
  var ratio = 16 / 9;


  return {
    onPlayerReady: initModal
  };

  /**
   * Sets up event listeners, etc for modal interaction.
   */
  function initModal(player) {
    var isMobile = document.body.classList.contains('mobile');
    return isMobile ? setupMobilePlayer(player.target) : setupModalPlayer(player.target);
  }

  /**
   * Don't interrupt the normal mobile YouTube player flow if the user is
   * on a device.
   */
  function setupMobilePlayer(player) {
    console.info('Setting up mobile player.')
  }

  /**
   * If we have an idea the user isn't on a mobile device, set up the
   * modal functionality.
   */
  function setupModalPlayer(player) {
    player.setPlaybackQuality('hd720');

    var modalContainer = document.querySelector('.video-modal');
    var vMedia = document.querySelector('.video-modal__media');
    var ytDom = document.getElementById('yt-player');
    var closeButton = document.querySelector('.video-modal__close span');
    var backdrop = createBackdrop_();

    var modalWidth = modalContainer.offsetWidth;
    var modalHeight = modalContainer.offsetHeight;

    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var maxWidth = winWidth - winWidth * MAX_WIDTH_PERC_;
    var maxHeight = maxWidth / ratio;

    modalContainer.addEventListener('click', openModal);
    document.addEventListener('click', checkModalClose);
    window.addEventListener('keyup', closeModal);
    closeButton.addEventListener('click', closeModal.bind(this, null, true));

    /**
     * Open the video modal.
     * @param {MouseEvent} e
     */
    function openModal(e) {
      var pos = modalContainer.getBoundingClientRect();
      var x = pos.left;
      var y = pos.top;

      vMedia.style.display = 'block';
      vMedia.style.left = x + 'px';
      vMedia.style.top = y + 'px';
      backdrop.style.display = 'block';

      var END_WIDTH_ = maxWidth + 'px';
      var END_HEIGHT_ = maxWidth / ratio + 'px';

      TweenMax.to(vMedia, EXPAND_DURATION_, {
        width: END_WIDTH_,
        height: END_HEIGHT_,
        opacity: 1,
        left: (winWidth - maxWidth) / 2 + 'px',
        top: (winHeight - maxHeight) / 2 + 'px',
        ease: Power2.easeInOut,
        onComplete: onModalOpen
      });

      TweenMax.to(backdrop, EXPAND_DURATION_, {
        opacity: 1
      })
    }

    /**
     * Close the modal and return to natural position.
     * Callback from ESC keypress
     * @param {KeyboardEvent} e
     */
    function closeModal(e, force) {
      if (force === true || e.keyCode == 27) {
        player.pauseVideo();

        var pos = modalContainer.getBoundingClientRect();
        var x = pos.left;
        var y = pos.top;

        TweenMax.to(vMedia, EXPAND_DURATION_, {
          width: modalWidth + 'px',
          height: modalHeight + 'px',
          left: x + 'px',
          top: y + 'px',
          opacity: 0,
          ease: Power2.easeInOut,
          onComplete: onModalClose
        });

        TweenMax.to(backdrop, EXPAND_DURATION_, {
          opacity: 0,
          onComplete: function() {
            backdrop.style.display = 'none';
          }
        })
      }
    }

    /**
     * Callback for clicking elsewhere on the document to close the modal.
     * @todo(sgeer)
     */
    function checkModalClose(e) {
      if (e.target.classList.contains('video-modal__backdrop')) {
        closeModal(null, true);
      }
    }

    /**
     * onComplete callback for opening the modal.
     */
    function onModalOpen() {
      ytDom.style.display = 'block';
      vMedia.style.display = 'block'
      player.playVideo();
      return TweenMax.to(ytDom, EXPAND_DURATION_, {
        opacity: 1
      });
    }

    function onModalClose() {
      return TweenMax.to(ytDom, EXPAND_DURATION_, {
        opacity: 0,
        onComplete: function() {
          ytDom.style.display = 'none';
          vMedia.style.display = 'none'
        }
      });
    }

    function createBackdrop_() {
      var div = document.createElement('div');
      div.classList.add('video-modal__backdrop');
      document.body.appendChild(div);
      return div;
    }
  }
})();
